#!/usr/bin/env python

import optparse
import logging
import string
import sys

# Temporarily set the path for testing
sys.path.append("../mctl")

from config import Config
from server import Server

parser  = optparse.OptionParser(
    usage       = "usage: %prog [OPTIONS]",
    description = "Minecraft server controller"
)

sacts  = optparse.OptionGroup(parser, "Server Actions")
sattrs = optparse.OptionGroup(parser, "Server Attributes")
pacts  = optparse.OptionGroup(parser, "Package Actions")
pattrs = optparse.OptionGroup(parser, "Package Attributes")

parser.add_option(
    "-g", "--config",
    action  = "store",
    dest    = "config",
    metavar = "PATH",
    help    = "specify a nonstandard config file"
)
parser.add_option(
    "-s", "--server",
    action  = "store",
    dest    = "server",
    metavar = "SERVER",
    help    = "server to apply actions and attributes to"
)
parser.add_option(
    "-p", "--package",
    action  = "store",
    dest    = "package",
    metavar = "PACKAGE",
    help    = "package to apply attributes to"
)
parser.add_option(
    "-e", "--fake-server",
    action  = "store_true",
    dest    = "fake_server",
    help    = "apply actions and attributes to a fake server"
)
parser.add_option(
    "-l", "--list-servers",
    action  = "store_true",
    dest    = "list_servers",
    help    = "list the current servers"
)
parser.add_option(
    "-a", "--list-packages",
    action  = "store_true",
    dest    = "list_packages",
    help    = "list the current packages"
)
parser.add_option(
    "-d", "--remove",
    action  = "store_true",
    dest    = "remove",
    help    = "remove the server or package"
)
parser.add_option(
    "-w", "--save",
    action  = "store_true",
    dest    = "save",
    help    = "save options to the config"
)
parser.add_option(
    "-f", "--force",
    action  = "store_true",
    dest    = "force",
    help    = "force specified actions"
)

sacts.add_option(
    "-i", "--start",
    action  = "store_true",
    dest    = "start",
    help    = "start the sever"
)
sacts.add_option(
    "-q", "--stop",
    action  = "store_true",
    dest    = "stop",
    help    = "stop the sever"
)
sacts.add_option(
    "-r", "--restart",
    action  = "store_true",
    dest    = "restart",
    help    = "restart the sever"
)
sacts.add_option(
    "-b", "--backup",
    action  = "store_true",
    dest    = "backup",
    help    = "backup the server paths"
)
sacts.add_option(
    "-u", "--update",
    action  = "store_true",
    dest    = "update",
    help    = "update the server packages"
)
sacts.add_option(
    "-c", "--command",
    action  = "store",
    dest    = "command",
    metavar = "COMMAND",
    help    = "run a command on the server"
)

sattrs.add_option(
    "--motd",
    action  = "store",
    dest    = "motd",
    metavar = "MOTD",
    help    = "MOTD for a fake-server"
)
sattrs.add_option(
    "--message",
    action  = "store",
    dest    = "message",
    metavar = "MESSAGE",
    help    = "message for restart/stop/kick"
)
sattrs.add_option(
    "--server-path",
    action  = "store",
    dest    = "server_path",
    metavar = "PATH",
    help    = "working directory or root path of the server"
)
sattrs.add_option(
    "--launch",
    action  = "store",
    dest    = "launch",
    metavar = "COMMAND",
    help    = "launch command for the server"
)
sattrs.add_option(
    "--timeout",
    action  = "store",
    dest    = "timeout",
    metavar = "TIMEOUT",
    help    = "server shutdown timeout in seconds"
)
sattrs.add_option(
    "--log-size",
    action  = "store",
    dest    = "log_size",
    metavar = "SIZE",
    help    = "max size of a log before being archived"
)
sattrs.add_option(
    "--log-path",
    action  = "store",
    dest    = "log_path",
    metavar = "PATH",
    help    = "directory to store archived logs in"
)
sattrs.add_option(
    "--backup-max",
    action  = "store",
    dest    = "backup_max",
    metavar = "MAX",
    help    = "max amount of backups before pruning"
)
sattrs.add_option(
    "--backup-path",
    action  = "store",
    dest    = "backup_path",
    metavar = "PATH",
    help    = "directory to store backup paths in"
)
sattrs.add_option(
    "--backup-paths",
    action  = "store",
    dest    = "backup_paths",
    metavar = "PATHS",
    help    = "list of server directories to backup"
)
sattrs.add_option(
    "--packages",
    action  = "store",
    dest    = "packages",
    metavar = "PACKAGES",
    help    = "list of packages for the updater"
)

pattrs.add_option(
    "--package-path",
    action  = "store",
    dest    = "package_path",
    metavar = "PATH",
    help    = "directory the package resides in"
)
pattrs.add_option(
    "--package-type",
    action  = "store",
    dest    = "package_type",
    metavar = "TYPE",
    help    = "download type of the package (jar|zip)"
)
pattrs.add_option(
    "--package-url",
    action  = "store",
    dest    = "package_url",
    metavar = "URL",
    help    = "URL for the updater"
)
pattrs.add_option(
    "--updater",
    action  = "store",
    dest    = "updater",
    metavar = "UPDATER",
    help    = "updater to use on the URL (bukkitdev|jenkins)"
)
pattrs.add_option(
    "--extract",
    action  = "store",
    dest    = "extract",
    metavar = "EXTRACT",
    help    = "list of files to extract from a downloaded archive"
)

parser.add_option_group(sacts)
parser.add_option_group(sattrs)
parser.add_option_group(pattrs)

opts, args = parser.parse_args()

config = Config(opts.config)
        
loggers = [
    "config", "archiver", "fakeserver",
    "mctl",   "server",   "package",
    "util"
]

lhndr = logging.StreamHandler()

for slog in loggers:
    log = logging.getLogger(slog)
    
    log.addHandler(lhndr)
    log.setLevel(logging.INFO)

config.load()

server  = None
package = None

if opts.list_servers:
    servers = config.servers_get()
    
    if len(servers) < 1:
        log.info("No servers found")
    
    for name in servers:
        server = servers[name]
        print "Server: %s" % (name)
        print "  Server Root:    %s"  % (server['path'])
        print "  Launch Command: %s"  % (server['launch'])
        print "  Stop Timeout:   %ss" % (server['timeout'])
        print "  Max Log Size:   %dM" % (server['log-size'])
        print "  Log Path:       %s"  % (server['log-path'])
        print "  Max Backups:    %d"  % (server['backup-max'])
        print "  Backup Path:    %s"  % (server['backup-path'])
        
        if len(server['backip-paths']) >= 1:
            print "  Backup Paths:   %s"  % (
                string.join(server['backup-paths'], ", ")
            )
        
        if len(server['packages']) >= 1:
            print "  Packages:       %s"  % (
                string.join(server['packages'], ", ")
            )
    
    exit()

if opts.list_packages:
    packages = config.packages_get()
    
    if len(packages) < 1:
        log.info("No packages found")
    
    for name in packages:
        package = packages[name]
        
        print "Package: %s" % (name)
        print "Version: %s" % (package['version'])
        print "Path:    %s" % (package['path'])
        print "Type:    %s" % (package['type'])
        print "URL:     %s" % (package['url'])
        print "Updater: %s" % (package['updater'])
        
        if len(package['extract']) >= 1:
            print "Extract: %s" % (string.join(package['extract'], ", "))
        
        print ""
    
    exit()

if opts.remove:
    if opts.server:
        config.server_remove(opts.server)
    
    if opts.package:
        config.package_remove(opts.package)
    
    exit()

if opts.server:
    server = config.server_get(opts.server)
    
    if opts.server_path:  server['path']         = opts.server_path
    if opts.launch:       server['launch']       = opts.launch
    if opts.timeout:      server['timeout']      = int(opts.timeout)
    if opts.log_size:     server['log-size']     = int(opts.log_size)
    if opts.log_path:     server['log-path']     = opts.log_path
    if opts.backup_max:   server['backup-max']   = int(opts.backup_max)
    if opts.backup_path:  server['backup-path']  = opts.backup_path
    if opts.backup_paths: server['backup-paths'] = opts.backup_paths.split(",")
    if opts.packages:     server['packages']     = opts.packages.split(",")
    
    config.server_set(opts.server, server)

if opts.package:
    package = config.package_get(opts.package)
    
    if opts.package_path: package['path']    = opts.package_path
    if opts.package_type: package['type']    = opts.package_type
    if opts.package_url:  package['url']     = opts.package_url
    if opts.updater:      package['updater'] = opts.updater
    if opts.extract:      package['extract'] = opts.extract.split(",")
    
    config.package_set(opts.package, package)

if opts.save:
    config.save()

if not opts.server:
    parser.error("option -s, --server is required")
    exit(1)

server = config.server_get(opts.server)
server = Server(opts.server, server)

if not server:
    parser.error("invalid server")
    exit(1)

if opts.backup:
    server.backup(opts.server)

if opts.update:
    config = server.update(config, opts.force)

if opts.stop:
    server.stop(opts.message)

if opts.start:
    server.start()

if opts.restart:
    server.restart(opts.message)

if opts.command:
    server.command(opts.command)
