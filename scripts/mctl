#!/usr/bin/env python

import optparse
import logging
import string
import sys

# Temporarily set the path for testing
sys.path.append("../")

from mctl.config import Config
from mctl.server import FakeServer, Server

parser = optparse.OptionParser(
    usage       = "usage: %prog [OPTIONS]",
    description = "Minecraft server controller"
)

acts  = optparse.OptionGroup(parser, "Server Actions")
attrs = optparse.OptionGroup(parser, "Server Attributes")

parser.add_option(
    "-g", "--config",
    action  = "store",
    dest    = "config",
    metavar = "PATH",
    help    = "specify a nonstandard config file"
)
parser.add_option(
    "-s", "--server",
    action  = "store",
    dest    = "server",
    metavar = "SERVER",
    help    = "server to apply actions and attributes to"
)
parser.add_option(
    "-l", "--list",
    action  = "store_true",
    dest    = "list",
    help    = "list the current servers"
)
parser.add_option(
    "-f", "--force",
    action  = "store_true",
    dest    = "force",
    help    = "force specified actions"
)

acts.add_option(
    "-i", "--start",
    action  = "store_true",
    dest    = "start",
    help    = "start the sever"
)
acts.add_option(
    "-q", "--stop",
    action  = "store_true",
    dest    = "stop",
    help    = "stop the sever"
)
acts.add_option(
    "-r", "--restart",
    action  = "store_true",
    dest    = "restart",
    help    = "restart the sever"
)
acts.add_option(
    "-e", "--start-fake",
    action  = "store_true",
    dest    = "start_fake",
    help    = "start the fake sever"
)
acts.add_option(
    "-k", "--stop-fake",
    action  = "store_true",
    dest    = "stop_fake",
    help    = "stop the fake sever"
)
acts.add_option(
    "-u", "--update",
    action  = "store_true",
    dest    = "update",
    help    = "update the server packages"
)
acts.add_option(
    "-a", "--archive",
    action  = "store",
    dest    = "archive",
    metavar = "ARCHIVES",
    help    = "the run the archiver on the archives"
)
acts.add_option(
    "-c", "--command",
    action  = "store",
    dest    = "command",
    metavar = "COMMAND",
    help    = "run a command on the server"
)

attrs.add_option(
    "--motd",
    action  = "store",
    dest    = "motd",
    metavar = "MOTD",
    help    = "MOTD for a fake server"
)
attrs.add_option(
    "--message",
    action  = "store",
    dest    = "message",
    metavar = "MESSAGE",
    help    = "message for restart/stop/kick"
)
attrs.add_option(
    "--timeout",
    action  = "store",
    dest    = "timeout",
    metavar = "TIMEOUT",
    help    = "server shutdown timeout in seconds"
)

parser.add_option_group(acts)
parser.add_option_group(attrs)

opts, args = parser.parse_args()

logging.basicConfig(format = "[%(levelname)s] %(message)s")

config = Config(opts.config)
log    = logging.getLogger("mctl")

log.setLevel(logging.INFO)

config.load()

server  = None
package = None

if opts.list:
    servers = config.servers_get()
    servers = servers.keys()
    
    if len(servers) < 1:
        print "No servers found"
    
    print "Server(s): %s" % (string.join(servers, ", "))
    exit()

if not opts.server:
    parser.error("option -s, --server is required")

if not config.server_exists(opts.server):
    parser.error("option -s, --server requires a valid server")

server = config.server_get(opts.server)

if opts.timeout:
    server['timeout'] = int(opts.timeout)

config.server_set(opts.server, server)
server = Server(opts.server, server)

if opts.archive:
    server.archive(opts.archive)

if opts.update:
    config = server.update(config, opts.force)

if opts.stop:
    server.stop(opts.message)

if opts.stop_fake:
    server.stop_fake()

if opts.start:
    server.start(opts.force)
elif opts.start_fake:
    server.start_fake(opts.motd, opts.message, opts.force)

if opts.restart:
    server.restart(opts.message)

if opts.command:
    server.command(opts.command)
