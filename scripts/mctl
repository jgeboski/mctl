#!/usr/bin/env python

# Copyright 2012-2013 James Geboski <jgeboski@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import logging
import optparse
import os
import string
import sys
import time

# Temporarily set the path for testing
sys.path.append("../")

from mctl.config import Config
from mctl.server import Server
from mctl.util   import fopen

def main():
    parser = optparse.OptionParser(
        usage       = "usage: %prog [OPTIONS]",
        description = "Minecraft server controller"
    )

    acts  = optparse.OptionGroup(parser, "Server Actions")
    attrs = optparse.OptionGroup(parser, "Server Attributes")

    parser.add_option(
        "-g", "--config",
        action  = "store",
        dest    = "config",
        metavar = "PATH",
        help    = "specify a nonstandard config file"
    )
    parser.add_option(
        "-s", "--server",
        action  = "store",
        dest    = "server",
        metavar = "SERVER",
        help    = "server to apply actions and attributes to"
    )
    parser.add_option(
        "-l", "--list",
        action  = "store_true",
        dest    = "list",
        help    = "list the current servers"
    )
    parser.add_option(
        "-f", "--force",
        action  = "store_true",
        dest    = "force",
        help    = "force specified actions"
    )
    parser.add_option(
        "-d", "--dry-run",
        action  = "store_true",
        dest    = "dryrun",
        help    = "run on a trial basis; do not modify packages"
    )

    acts.add_option(
        "-u", "--upgrade",
        action  = "store_true",
        dest    = "upgrade",
        help    = "upgrade the server packages"
    )
    acts.add_option(
        "-i", "--start",
        action  = "store_true",
        dest    = "start",
        help    = "start the sever"
    )
    acts.add_option(
        "-q", "--stop",
        action  = "store_true",
        dest    = "stop",
        help    = "stop the sever"
    )
    acts.add_option(
        "-r", "--restart",
        action  = "store_true",
        dest    = "restart",
        help    = "restart the sever"
    )
    acts.add_option(
        "-c", "--command",
        action  = "store",
        dest    = "command",
        metavar = "COMMAND",
        help    = "run a command on the server"
    )

    attrs.add_option(
        "--include",
        action  = "store",
        dest    = "include",
        metavar = "LIST",
        help    = "list packages to include"
    )
    attrs.add_option(
        "--exclude",
        action  = "store",
        dest    = "exclude",
        metavar = "LIST",
        help    = "list packages to exclude"
    )
    attrs.add_option(
        "--message",
        action  = "store",
        dest    = "message",
        metavar = "MESSAGE",
        help    = "message for restart/stop"
    )
    attrs.add_option(
        "--timeout",
        action  = "store",
        dest    = "timeout",
        metavar = "TIMEOUT",
        help    = "server shutdown timeout in seconds"
    )

    parser.add_option_group(acts)
    parser.add_option_group(attrs)

    opts, args = parser.parse_args()

    logging.basicConfig(format = "[%(levelname)s] %(message)s")

    config = Config(opts.config)
    log    = logging.getLogger("mctl")

    log.setLevel(logging.INFO)
    config.load()

    server  = None
    package = None

    if opts.list:
        servers = config.servers_get()
        servers = servers.keys()

        if len(servers) < 1:
            print "No servers found"

        print "Server(s): %s" % (string.join(servers, ", "))
        return 0

    if not opts.server:
        parser.error("option -s, --server is required")

    if not config.server_exists(opts.server):
        parser.error("option -s, --server requires a valid server")

    server = config.server_get(opts.server)

    if opts.timeout:
        server['timeout'] = int(opts.timeout)

    config.server_set(opts.server, server)
    server = Server(opts.server, server)

    if opts.dryrun:
        if opts.upgrade:
            server.upgrade(config, opts.force, opts.include, opts.exclude, True)
        return 0

    lfh = os.path.join(server.path, "mctl.log")
    lfh = logging.FileHandler(lfh)
    fmt = logging.Formatter("%(asctime)s [%(levelname)s] %(message)s",
                            "%y-%m-%d %H:%M:%S")

    lfh.setFormatter(fmt)
    log.addHandler(lfh)

    msg = "** MCTL: %s" % (string.join(sys.argv))
    rcd = log.makeRecord(log.name, logging.INFO, None, 0, msg, None, None)
    lfh.emit(rcd)

    if opts.restart:
        opts.stop = opts.start = True

    if opts.stop:
        server.stop(opts.message)

    if opts.upgrade:
        server.upgrade(config, opts.force, opts.include, opts.exclude, False)

    if opts.start:
        server.start(opts.force)

    if opts.command:
        server.command(opts.command)

    lfh.stream.write(os.linesep)
    lfh.close()

if __name__ == "__main__":
    exit(main())
