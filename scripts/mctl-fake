#!/usr/bin/env python

# Copyright 2012-2013 James Geboski <jgeboski@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import asyncore
import logging
import os
import signal
import sys

# Temporarily set the path for testing
sys.path.append("../")

from mctl.fakeserver import FakeServer
from mctl.util       import fopen, unlink
from signal          import signal, SIGINT
from threading       import Event

def parseargs():
    parser = argparse.ArgumentParser(
        description = "Minecraft fake server"
    )

    parser.add_argument(
        "-s", "--server",
        required = True,
        type     = str,
        action   = "store",
        dest     = "server",
        metavar  = "SERVER",
        help     = "server to apply actions and attributes to"
    )

    parser.add_argument(
        "-f", "--foreground",
        required = False,
        action   = "store_true",
        dest     = "foreground",
        help     = "do not fork into a screen session"
    )

    parser.add_argument(
        "-k", "--kill",
        required = False,
        action   = "store_true",
        dest     = "kill",
        help     = "kill the server"
    )

    parser.add_argument(
        "--addr",
        required = False,
        type     = str,
        action   = "store",
        dest     = "addr",
        metavar  = "ADDRESS",
        help     = "address to bind to and listen on"
    )

    parser.add_argument(
        "--port",
        required = False,
        type     = int,
        action   = "store",
        dest     = "port",
        metavar  = "PORT",
        help     = "port to bind to and listen on"
    )

    parser.add_argument(
        "--favicon",
        required = False,
        type     = str,
        action   = "store",
        dest     = "favicon",
        metavar  = "FILE",
        help     = "favicon to display (PNG image)"
    )

    parser.add_argument(
        "--motd",
        required = False,
        type     = str,
        action   = "store",
        dest     = "motd",
        metavar  = "MOTD",
        help     = "message of The Day to display"
    )

    parser.add_argument(
        "--message",
        required = False,
        type     = str,
        action   = "store",
        dest     = "message",
        metavar  = "MESSAGE",
        help     = "message to display on kick"
    )

    return parser.parse_args()

def main():
    args = parseargs()
    log  = logging.getLogger("mctl")

    logging.basicConfig(format = "[%(levelname)s] %(message)s")
    log.setLevel(logging.INFO)

    if args.kill:
        return 0 if FakeServer.kill(args.server) else 1

    if FakeServer.running(args.server):
        log.error("%s: failed to start: fake server is running", args.server)
        return 1

    if not args.foreground:
        FakeServer.fork(args.server, args.addr, args.port, args.favicon,
                        args.motd, args.message)
        return 0

    pidfile = FakeServer.pidfile(args.server)
    pid     = os.getpid()
    fp      = fopen(pidfile, "w", True)

    if not fp:
        return 1

    fp.write(str(pid))
    fp.close()

    running = Event()
    signal(SIGINT, lambda s, f: running.set())

    server = FakeServer(args.addr, args.port, args.favicon, args.motd,
                        args.message)

    while not running.isSet():
        asyncore.loop(timeout = 1, count = 1)

    server.close()
    unlink(pidfile)
    return 0

if __name__ == "__main__":
    exit(main())
